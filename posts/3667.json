{"bookmarked": 6, "bucket_name": "Today", "bucket_order": 3, "change_log": [{"anon": "stud", "data": "j11s4ez1dr26bi", "type": "create", "uid_a": "a_0", "when": "2017-04-03T07:13:21Z"}, {"anon": "no", "to": "j11s4eyzxyp6bh", "type": "followup", "uid": "h69mwtr4j7461h", "when": "2017-04-03T16:16:05Z"}, {"anon": "stud", "data": "j130o9y6iqv48d", "to": "j11s4eyzxyp6bh", "type": "s_answer", "uid_a": "a_1", "when": "2017-04-04T04:00:31Z"}, {"anon": "stud", "data": "j130uywbn196sq", "type": "s_answer_update", "uid_a": "a_1", "when": "2017-04-04T04:05:43Z"}, {"anon": "stud", "data": "j130vb4phdq6ym", "type": "s_answer_update", "uid_a": "a_1", "when": "2017-04-04T04:05:59Z"}, {"anon": "stud", "data": "j1311r9gllj6be", "type": "s_answer_update", "uid_a": "a_1", "when": "2017-04-04T04:11:00Z"}], "children": [{"anon": "no", "bucket_name": "Week 4/2 - 4/8", "bucket_order": 158, "children": [], "config": {}, "created": "2017-04-03T16:16:05Z", "data": {"embed_links": null}, "folders": [], "id": "j12bidrmqav7m0", "no_answer": 0, "no_upvotes": 0, "subject": "<p>For your latter question: both the <a href=\"https://www2.eecs.berkeley.edu/Scheduling/CS/schedule-draft.html\" target=\"_blank\">CS draft schedule</a> as well as the <a target=\"_blank\">schedule of classes for next semester</a> say no.</p>", "tag_good": [], "tag_good_arr": [], "type": "followup", "uid": "h69mwtr4j7461h", "updated": "2017-04-03T16:16:05Z"}, {"bucket_name": "Today", "bucket_order": 3, "children": [], "config": {}, "created": "2017-04-04T04:00:31Z", "data": {"embed_links": []}, "folders": [], "history": [{"anon": "stud", "content": "I took <a href=\"http://www-inst.eecs.berkeley.edu/~cs152/fa16/\">CS 152 last Fall with Prof. Wawrzynek</a>. (Martin Maas, the GSI, deserves a shout out too!)\n\nI liked the course and you&#39;ll probably like it too if you enjoyed the material in CS 61C! Looking over my calendar, I spent a total of 156.5 hours outside of lecture and discussion on the course although this is highly dependent on how confident you are with CS 61C material. (If it&#39;s any help, I also took CS 168 that semester and spent 92.5 hours outside of class on it. Again, highly dependent on CS 61C knowledge so take it with a grain of salt.) Here&#39;s how the course is broken down:\n\nThe course is structured into five modules, each containing an in-lecture quiz (but midterm length and difficulty) and a substantial lab project of about 20 hours worth of work each. Each project contains two parts: a required portion and a choose-your-own-adventure portion. No final exam though, which is really chill! The course basically finishes the last day of instruction.\n\nSince it&#39;s a design course, the projects concern themselves with comparing and contrasting designs and compiling a final report complete with diagrams, write-up, etc. that would be sufficient to prove to someone else why we would use this design over other competing designs. Because of this, a large part of the required portion of the projects is about taking measurements and analyzing performance under different benchmarks. It can be a little dry at times, but it&#39;s a very practical skill and you&#39;ll definitely learn how to do practical Python scripting! (Unless you want to manually compile and test hundreds of permutations of cache configurations!)\n\nThe open portion of the project usually involves extending or applying the results from the required portion in interesting ways. Sometimes, this would mean designing a new component (in rigorous detail) that optimizes for a particular case that you studied in the required portion, writing low-level C or assembly code that optimizes for the hardware, or figure out the best-performing cache configuration on a set of test benchmarks.\n\nThere&#39;s very little low-level microprocessor hardware design in Chisel: try EECS 151 instead. Instead, we focus on the ideas behind the modern strategies we use to make microprocessors fast in the common workload and analyzing the hardware abstractions that lets programmers write fast programs. What&#39;s really cool about this course is that we worked with RISC-V, which is like MIPS but with none of the language oddities and inconsistencies you had to deal with in CS 61C. But working with RISC-V is a double-edged sword since there&#39;s very little documentation and the toolchain and third party support is still immature, <em>especially, especially</em> when you try writing multi-threaded and vectorized code in RISC-V &#43; Hwacha assembly. Debugging that project was an interesting but not exactly relivable experience.\n\nMy other complaint is that it builds upon CS 61C knowledge, but if you&#39;re already really good at CS 61C, it won&#39;t feel like you&#39;re learning very much for the first two or three modules. Take a look at the slides to get a sense of what&#39;s covered.\n\nOtherwise, take it if you&#39;re looking for CS 61C&#43;&#43;! (With the one caveat being the very different course structure I mentioned above.)\n\nIt doesn&#39;t look like it will be offered next year though :(", "created": "2017-04-04T04:11:00Z", "subject": "", "uid_a": "a_1"}, {"anon": "stud", "content": "I took <a href=\"http://www-inst.eecs.berkeley.edu/~cs152/fa16/\">CS 152 last Fall with Prof. Wawrzynek</a>. (Martin Maas, the GSI, deserves a shout out too!)\n\nI liked the course and you&#39;ll probably like it too if you enjoyed the material in CS 61C! Looking over my calendar, I spent a total of 156.5 hours outside of lecture and discussion on the course although this is highly dependent on how confident you are with CS 61C material. (If it&#39;s any help, I also took CS 168 that semester and spent 92.5 hours outside of class on it. Again, highly dependent on CS 61C knowledge so take it with a grain of salt.) Here&#39;s how the course is broken down:\n\nThe course is structured into five modules, each containing an in-lecture quiz (but midterm length and difficulty) and a substantial lab project of about 20 hours worth of work each. Each project contains two parts: a required portion and a choose-your-own-adventure portion. No final exam though, which is really chill! The course basically finishes the last day of instruction.\n\nSince it&#39;s a design course, the projects concern themselves with comparing and contrasting designs and compiling a final report complete with diagrams, write-up, etc. that would be sufficient to prove to someone else why we would use this design over other competing designs. Because of this, a large part of the projects is about taking measurements and analyzing performance under different benchmarks. It can be a little dry at times, but it&#39;s a very practical skill and you&#39;ll definitely learn how to do practical Python scripting! (Unless you want to manually compile and test hundreds of permutations of cache configurations!)\n\nThere&#39;s very little low-level microprocessor hardware design in Chisel: try EECS 151 instead. Instead, we focus on the ideas behind the modern strategies we use to make microprocessors fast in the common workload and analyzing the hardware abstractions that lets programmers write fast programs. What&#39;s really cool about this course is that we worked with RISC-V, which is like MIPS but with none of the language oddities and inconsistencies you had to deal with in CS 61C. But working with RISC-V is a double-edged sword since there&#39;s very little documentation and the toolchain and third party support is still immature, <em>especially, especially</em> when you try writing multi-threaded and vectorized code in RISC-V &#43; Hwacha assembly. Debugging that project was an interesting but not exactly relivable experience.\n\nMy other complaint is that it builds upon CS 61C knowledge, but if you&#39;re already really good at CS 61C, it won&#39;t feel like you&#39;re learning very much for the first two or three modules. Take a look at the slides to get a sense of what&#39;s covered.\n\nOtherwise, take it if you&#39;re looking for CS 61C&#43;&#43;! (With the one caveat being the very different course structure I mentioned above.)\n\nIt doesn&#39;t look like it will be offered next year though :(", "created": "2017-04-04T04:05:59Z", "subject": "", "uid_a": "a_1"}, {"anon": "stud", "content": "I took <a href=\"http://www-inst.eecs.berkeley.edu/~cs152/fa16/\">CS 152 last Fall with Prof. Wawrzynek</a>. (Martin Maas, the GSI, deserves a shout out too!)\n\nI liked the course and you&#39;ll probably like it too if you enjoyed the material in CS 61C! Looking over my calendar, I spent a total of 156.5 hours outside of lecture and discussion on the course although this is highly dependent on how confident you are with CS 61C material. (If it&#39;s any help, I also took CS 168 that semester and spent 92.5 hours outside of class on it. Again, highly dependent on CS 61C knowledge so take it with a grain of salt.) Here&#39;s how the course is broken down:\n\nThe course is structured into five modules, each containing an in-lecture quiz (but midterm length and difficulty) and a substantial lab project of about 20 hours worth of work each. Each project contains two parts: a required portion and a choose-your-own-adventure portion. No final exam though, which is really chill! The course basically finishes the last day of instruction.\n\nSince it&#39;s a design course, the projects concern themselves with comparing and contrasting designs and compiling a final report complete with diagrams, write-up, etc. that would be sufficient to prove to someone else why we would use this design over other competing designs. Because of this, a large part of the projects is about taking measurements and analyzing performance under different benchmarks. It can be a little dry at times, but it&#39;s a very practical skill and you&#39;ll definitely learn how to do practical Python scripting! (Unless you want to manually compile and test hundreds of permutations of cache configurations!)\n\nThere&#39;s very little low-level microprocessor hardware design in Chisel: try EECS 151 instead. Instead, we focus on the ideas behind the modern strategies we use to make microprocessors fast in the common workload and analyzing the hardware abstractions that lets programmers write fast programs. What&#39;s really cool about this course is that we worked with RISC-V, which is like MIPS but with none of the language oddities and inconsistencies you had to deal with in CS 61C. But working with RISC-V is a double-edged sword since there&#39;s very little documentation and the toolchain and third party support is still immature, <em>especially, especially</em> when you try writing multi-threaded and vectorized code in RISC-V &#43; Hwacha assembly. Debugging that project was an interesting but not exactly relivable experience.\n\nMy other complaint is that it builds upon CS 61C knowledge, but if you&#39;re already really good at CS 61C, it won&#39;t feel like you&#39;re learning very much for the first two or three modules. Take a look at the slides to get a sense of what&#39;s covered.\n\nOtherwise, take it if you&#39;re looking for CS 61C&#43;&#43; (with the one caveat being the very different course structure as I mentioned earlier!)\n\nIt doesn&#39;t look like it will be offered next year though :(", "created": "2017-04-04T04:05:43Z", "subject": "", "uid_a": "a_1"}, {"anon": "stud", "content": "I took <a href=\"http://www-inst.eecs.berkeley.edu/~cs152/fa16/\">CS 152 last Fall with Prof. Wawrzynek</a>. (Martin Maas, the GSI, deserves a shout out too!)\n\nI liked the course and you&#39;ll probably like it too if you enjoyed the material in CS 61C! Looking over my calendar, I spent a total of 156.5 hours outside of lecture and discussion on the course although this is highly dependent on how confident you are with CS 61C material. (If it&#39;s any help, I also took CS 168 that semester and spent 92.5 hours outside of class on it. Again, highly dependent on CS 61C knowledge so take it with a grain of salt.) Here&#39;s how the course is broken down:\n\nThe course is structured into five modules, each containing an in-lecture quiz (but midterm length and difficulty) and a substantial lab project of about 20 hours worth of work each. Each project contains two parts: a required portion and a choose-your-own-adventure portion. No final exam though, which is really chill! The course basically finishes the last day of instruction.\n\nSince it&#39;s a design course, the projects concern themselves with comparing and contrasting designs and compiling a final report complete with diagrams, write-up, etc. that would be sufficient to prove to someone else why we would use this design over other competing designs. Because of this, a large part of the projects is about taking measurements and analyzing performance under different benchmarks. It can be a little dry at times, but it&#39;s a very practical skill and you&#39;ll definitely learn how to do practical Python scripting! (Unless you want to manually compile and test hundreds of permutations of cache configurations!)\n\nThere&#39;s very little low-level microprocessor hardware design in Chisel: try EECS 151 instead. Instead, we focus on the ideas behind the modern strategies we use to make microprocessors fast in the common workload and analyzing the hardware abstractions that lets programmers write fast programs. What&#39;s really cool about this course is that we worked with RISC-V, which is like MIPS but with none of the language oddities and inconsistencies you had to deal with in CS 61C. But working with RISC-V is a double-edged sword since there&#39;s very little documentation and the toolchain and third party support is still immature, <em>especially, especially</em> when you try writing multi-threaded and vectorized code in RISC-V &#43; Hwacha assembly. Debugging that project was an interesting but not exactly relivable experience.\n\nMy other complaint is that it builds upon CS 61C knowledge, but if you&#39;re already really good at CS 61C, it won&#39;t feel like you&#39;re learning very much for the first two or three modules. Take a look at the slides to get a sense of what&#39;s covered.\n\nOtherwise, take it if you&#39;re looking for CS 61C&#43;&#43;!\n\nIt doesn&#39;t look like it will be offered next year though :(", "created": "2017-04-04T04:00:31Z", "subject": "", "uid_a": "a_1"}], "id": "j130o9y1hv148c", "is_tag_endorse": false, "tag_endorse": [{"admin": false, "endorser": {}, "facebook_id": null, "id": "idrin0mls8uml", "name": "William", "photo": "1487565308_35.png", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/idrin0mls8uml/1487565308_35.png", "published": true, "role": "", "us": false}, {"admin": false, "class_sections": ["classof2019_hyq0br1u3kx7dg"], "endorser": {}, "facebook_id": null, "id": "icguxs6dab51fp", "name": "Udaya Jonnalagadda", "photo": null, "photo_url": null, "published": true, "role": "student", "us": false}, {"admin": false, "endorser": {}, "facebook_id": null, "id": "is6p7o14car6b8", "name": "Caroline Zhou", "photo": "1534974637_35.png", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/is6p7o14car6b8/1534974637_35.png", "published": true, "role": "student", "us": false}, {"admin": false, "endorser": {}, "facebook_id": null, "id": "ipkfr46v4g91se", "name": "David Chung", "photo": null, "photo_url": null, "published": true, "role": "student", "us": false}], "tag_endorse_arr": ["idrin0mls8uml", "icguxs6dab51fp", "is6p7o14car6b8", "ipkfr46v4g91se"], "type": "s_answer"}], "config": {}, "created": "2017-04-03T07:13:21Z", "data": {"embed_links": []}, "default_anonymity": "no", "drafts": {}, "folders": ["peer_directed"], "history": [{"anon": "stud", "content": "<p>Just a couple of questions about this class.</p>\n<p>How much is the workload and around how much time should I expect to spend each week on this course?</p>\n<p>Also, does anyone know if it will be offered during Fall 2017?</p>\n<p>Thanks!</p>", "created": "2017-04-03T07:13:21Z", "subject": "CS 152", "uid_a": "a_0"}], "i_edits": [], "id": "j11s4eyzxyp6bh", "is_bookmarked": false, "is_tag_good": false, "my_favorite": false, "no_answer": 0, "no_answer_followup": 0, "nr": 3667, "num_favorites": 6, "q_edits": [], "request_instructor": 0, "request_instructor_me": false, "s_edits": [], "status": "active", "t": 1654552592190, "tag_good": [{"admin": false, "endorser": {"global": 1, "id52tzq2i7yfx": 1, "ixur6mzlrc465l": 1}, "facebook_id": null, "id": "idgol3r3v9d4yk", "name": "Eli Lipsitz", "photo": "1477463146_35.png", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/idgol3r3v9d4yk/1477463146_35.png", "role": "student", "us": false}, {"admin": false, "endorser": {"global": 1, "hyq0br1u3kx7dg": 1, "ij5ddqc0arp6r4": 1, "ijaiqhfuhrc31e": 1, "ixtb5qkalsx6yo": 1}, "facebook_id": null, "id": "ijjujonuuj57nk", "name": "Jayanth Sundaresan", "photo": null, "photo_url": null, "published": true, "role": "student", "us": false}, {"admin": false, "endorser": {"global": 1, "iiklg7j9ggf2vl": 1, "is2cj7i01en1dj": 1, "is2qi3hwdjn3i8": 1}, "facebook_id": null, "id": "idqu0mwlx9r5lf", "name": "Jerry Zhao", "photo": null, "photo_url": null, "published": true, "role": "student", "us": false}], "tag_good_arr": ["idgol3r3v9d4yk", "ijjujonuuj57nk", "idqu0mwlx9r5lf"], "tags": ["peer_directed", "student"], "type": "question", "unique_views": 427}