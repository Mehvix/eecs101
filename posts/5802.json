{"bookmarked": 6, "bucket_name": "Today", "bucket_order": 3, "change_log": [{"anon": "no", "data": "jbe5sr43cve664", "type": "create", "uid": "j3nrzk3ziim4pf", "when": "2017-12-19T21:46:29Z"}, {"anon": "stud", "data": "jbeacsprge420m", "to": "jbe5sr41pna663", "type": "s_answer", "uid_a": "a_0", "when": "2017-12-19T23:54:03Z"}, {"anon": "stud", "data": "jbeaf5ngvzr6dt", "type": "s_answer_update", "uid_a": "a_0", "when": "2017-12-19T23:55:53Z"}, {"anon": "stud", "data": "jbec5el3ga0cc", "type": "update", "uid_a": "a_1", "when": "2017-12-20T00:44:17Z"}, {"anon": "no", "to": "jbe5sr41pna663", "type": "followup", "uid": "j3l3zadxpy7594", "when": "2017-12-20T04:31:16Z"}, {"anon": "stud", "to": "jbe5sr41pna663", "type": "feedback", "uid_a": "a_2", "when": "2017-12-20T04:38:43Z"}, {"anon": "no", "to": "jbe5sr41pna663", "type": "followup", "uid": "is6p6y4cble5r5", "when": "2017-12-25T07:22:55Z"}], "children": [{"bucket_name": "Today", "bucket_order": 3, "children": [], "config": {}, "created": "2017-12-19T23:54:03Z", "data": {"embed_links": []}, "folders": [], "history": [{"anon": "stud", "content": "<p>162 tells you a lot of fundamentals behind operating systems and is good even if you never intend to work on operating systems because you&#39;ll learn a lot of the fundamentals around interacting with the kernel and system calls.\u00a0</p>\n<p></p>\n<p>151 is a more dedicated class. It is essential if you want to learn Verilog and you will put together an entire processor in Verilog by the time you complete the class, but it doesn&#39;t go super in depth into actual processor design. If you are solely interested in software, it might be more worth it to take CS152 instead which uses Chisel (a Scala based HDL and teaches a lot about scripting with hardware design).\u00a0</p>", "created": "2017-12-19T23:55:53Z", "subject": "", "uid_a": "a_0"}, {"anon": "stud", "content": "<p>I have taken both 162 and 151. 162 tells you a lot of fundamentals behind operating systems and is good even if you never intend to work on operating systems because you&#39;ll learn a lot of the fundamentals around interacting with the kernel and system calls.\u00a0</p>\n<p></p>\n<p>151 is a more dedicated class. It is essential if you want to learn Verilog and you will put together an entire processor in Verilog by the time you complete the class, but it doesn&#39;t go super in depth into actual processor design.\u00a0</p>", "created": "2017-12-19T23:54:03Z", "subject": "", "uid_a": "a_0"}], "id": "jbeacspl5mw20l", "is_tag_endorse": false, "tag_endorse": [], "tag_endorse_arr": [], "type": "s_answer"}, {"anon": "no", "bucket_name": "Week 12/17 - 12/23", "bucket_order": 120, "children": [{"anon": "stud", "bucket_name": "Week 12/17 - 12/23", "bucket_order": 120, "children": [], "config": {}, "created": "2017-12-20T04:38:43Z", "data": {"embed_links": null}, "folders": [], "id": "jbekiw498tw6c6", "subject": "<p>This is not accurate ^</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_2", "updated": "2017-12-20T04:38:43Z"}], "config": {}, "created": "2017-12-20T04:31:16Z", "data": {"embed_links": null}, "folders": [], "id": "jbek9b0onmr4c3", "no_answer": 0, "no_upvotes": 0, "subject": "<p>Taking EE 105/130/140/142/147 is also recommended. 105/130 is transistor design IIRC, and 140/142 is integrated circuits [105/130 pre-req&#39;d]. 147 is micro-electromechanical systems.</p>\n<p></p>\n<p></p>\n<p>Also, you should absolutely look into the CS-194 section this Spring semester on computer hardware design using CAD. The class is called CS 194-28, Computational Design and Fabrication, and is taught by the brilliant Dr. Jonathan Bachrach. The former course page can be found here:\u00a0<a href=\"http://inst.eecs.berkeley.edu/~cs194-28/fa15/\">http://inst.eecs.berkeley.edu/~cs194-28/fa15/</a>.\u00a0</p>\n<p></p>\n<p>I will note the pre-reqs are extensive. 61AB, CS164, CS169, with 184 and various linear algebra courses recommended. However, it seems to be the perfect course for you.</p>", "tag_good": [], "tag_good_arr": [], "type": "followup", "uid": "j3l3zadxpy7594", "updated": "2017-12-20T04:31:16Z"}, {"anon": "no", "bucket_name": "Week 12/24 - 12/30", "bucket_order": 119, "children": [], "config": {}, "created": "2017-12-25T07:22:55Z", "data": {"embed_links": null}, "folders": [], "id": "jblvlawox6b3pi", "no_answer": 0, "no_upvotes": 0, "subject": "Depending on your specific interest, other 160-series courses might be of interest - mostly 161 (security), 164 (compilers), and 168 (networking). 152&#43;162 sounds like the perfect starting point though!", "tag_good": [], "tag_good_arr": [], "type": "followup", "uid": "is6p6y4cble5r5", "updated": "2017-12-25T07:22:55Z"}], "config": {}, "created": "2017-12-19T21:46:29Z", "data": {"embed_links": []}, "default_anonymity": "no", "drafts": null, "folders": ["eecs", "lscs", "other"], "history": [{"anon": "stud", "content": "<p>So computer science has become incredibly abstracted compared to past where computer scientist might understand the circuitry of their their hardware. I was having a discussion with my friend where he thinks that understanding the lower levels help you understand what is going on in your programs, your computer, and your debugging. I am currently enrolled in CS 61C but was wondering what and how to learn each level of abstraction at Berkeley EECS. I&#39;ve come up with the preliminary:</p><br /><p>EECS 151: Introduction to Digital Design and Integrated Circuits</p><br /><p>CS 152: Computer Architecture and Engineering</p><br /><p>CS 162: Operating Systems and System Programming</p><br /><p></p><br /><p>Are there any other classes in the computer systems stack such as those more lower-level, higher-level, in-between? How useful is it to takes these classes and others related?</p><p></p>", "created": "2017-12-20T00:44:17Z", "subject": "The Computer Systems Stack", "uid_a": "a_1"}, {"anon": "no", "content": "<p>So computer science has become incredibly abstracted compared to past where computer scientist might understand the circuitry of their their hardware. I was having a discussion with my friend where he thinks that understanding the lower levels help you understand what is going on in your programs, your computer, and your debugging. I am currently enrolled in CS 61C but was wondering what and how to learn each level of abstraction at Berkeley EECS. I&#39;ve come up with the preliminary:</p>\n<p>EECS 151: Introduction to Digital Design and Integrated Circuits</p>\n<p>CS 152: Computer Architecture and Engineering</p>\n<p>CS 162: Operating Systems and System Programming</p>\n<p></p>\n<p>Are there any other classes in the computer systems stack such as those more lower-level, higher-level, in-between? How useful is it to takes these classes and others related?</p>", "created": "2017-12-19T21:46:29Z", "subject": "The Computer Systems Stack", "uid": "j3nrzk3ziim4pf"}], "i_edits": [], "id": "jbe5sr41pna663", "is_bookmarked": false, "is_tag_good": false, "my_favorite": false, "no_answer": 0, "no_answer_followup": 0, "nr": 5802, "num_favorites": 3, "q_edits": [], "request_instructor": 0, "request_instructor_me": false, "s_edits": [], "status": "active", "t": 1654550542035, "tag_good": [], "tag_good_arr": [], "tags": ["eecs", "lscs", "other", "student"], "type": "question", "unique_views": 776}