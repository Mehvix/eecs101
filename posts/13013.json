{"bookmarked": 9, "bucket_name": "Today", "bucket_order": 3, "change_log": [{"anon": "stud", "data": "ke9megz0mra63j", "type": "create", "uid_a": "a_0", "v": "all", "when": "2020-08-25T07:20:56Z"}, {"anon": "stud", "data": "ke9y8bfqz5c3tt", "to": "ke9megyxn4x63i", "type": "s_answer", "uid_a": "a_1", "when": "2020-08-25T12:52:05Z"}, {"anon": "stud", "data": "keacdupxtv11t", "type": "s_answer_update", "uid_a": "a_0", "when": "2020-08-25T19:28:18Z"}, {"anon": "stud", "data": "keahzojpdw94ju", "type": "s_answer_update", "uid_a": "a_2", "when": "2020-08-25T22:05:14Z"}, {"anon": "stud", "data": "keai0al9txv5eq", "type": "s_answer_update", "uid_a": "a_2", "when": "2020-08-25T22:05:43Z"}, {"anon": "stud", "data": "keai1ldhh0f6kd", "type": "s_answer_update", "uid_a": "a_2", "when": "2020-08-25T22:06:43Z"}, {"anon": "stud", "data": "keai2exy8xs78q", "type": "s_answer_update", "uid_a": "a_2", "when": "2020-08-25T22:07:22Z"}, {"anon": "stud", "data": "keai3kaj72o3dz", "type": "s_answer_update", "uid_a": "a_2", "when": "2020-08-25T22:08:15Z"}, {"anon": "stud", "to": "ke9megyxn4x63i", "type": "followup", "uid_a": "a_3", "when": "2020-08-26T19:08:56Z"}], "children": [{"bucket_name": "Today", "bucket_order": 3, "children": [], "config": {}, "created": "2020-08-25T12:52:05Z", "data": {"embed_links": []}, "folders": [], "history": [{"anon": "stud", "content": "<p>Since it seems like you enjoyed security, the design of an operating system takes many security ideas you learn about in 161. An OS kernel is part of your TCB and the various user-level programs may or may not be adversary. How can you ensure that a user-level program doesn&#39;t hog up CPU-time and prevent other user programs from executing (DDOS)? When a user-program requests resources from the OS kernel, what defenses are there to ensure the user-program can&#39;t pass in arguments to cause the kernel to panic? How can user programs be protected from other adversarial user programs? I think one thing overlooked with 162 is the security aspect of it.</p>\n<p></p>\n<p>There are many security concepts you may apply from 161 to to the design of a monolithic kernel in 162. There are computer architecture elements and distributed systems topics covered in 162 that have less focus on security (no mention of micro-architectural defenses).\u00a0\u00a0</p>\n<p></p>\n<p>My opinion is biased, speaking as someone previously on course staff, but there are other reasons and I am sure that has been discussed in previous piazza threads you can search up to get you excited about 162!</p>", "created": "2020-08-25T22:08:15Z", "subject": "", "uid_a": "a_2"}, {"anon": "stud", "content": "<p>Since it seems like you enjoyed security, the design of an operating system takes many security ideas you learn about in 161. An OS kernel is part of your TCB and the various user-level programs may or may not be adversary. How can you ensure that a user-level program doesn&#39;t hog up CPU-time and prevent other user programs from executing (DDOS)? When a user-program requests resources from the OS kernel, what defenses are there to ensure the user-program can&#39;t pass in arguments to cause the kernel to panic? How can user programs be protected from other adversarial user programs? I think one thing overlooked with 162 is the security aspect of it.</p>\n<p></p>\n<p>There are a some security concepts you may apply from 161 to to the design of a monolithic kernel in 162. There are computer architecture elements and distributed systems topics covered in 162 that have less focus on security (no mention of micro-architectural defenses).\u00a0\u00a0</p>\n<p></p>\n<p>My opinion is biased, speaking as someone previously on course staff, but there are other reasons and I am sure that has been discussed in previous piazza threads you can search up to get you excited about 162!</p>", "created": "2020-08-25T22:07:22Z", "subject": "", "uid_a": "a_2"}, {"anon": "stud", "content": "<p>Since it seems like you enjoyed security, the design of an operating system takes many security ideas you learn about in 161. An OS kernel is part of your TCB and the various user-level programs may or may not be adversary. How can you ensure that a user-level program doesn&#39;t hog up CPU-time and prevent other user programs from executing (DDOS)? When a user-program requests resources from the OS kernel, what defenses are there to ensure the user-program can&#39;t pass in arguments to cause the kernel to panic? How can user programs be protected from other adversarial user programs? I think one thing overlooked with 162 is the security aspect of it.</p>\n<p></p>\n<p>There are a some security concepts you may apply from 161 to to the design of a monolithic kernel in 162. There are computer architecture elements and distributed systems topics covered in 162 that have less focus on security (no mention of micro-architectural defenses).\u00a0\u00a0</p>\n<p></p>\n<p>My opinion is biased, speaking as someone previously on course staff, but there are other reasons and I am sure that has been discussed in previous piazza threads to get you excited about the course!</p>", "created": "2020-08-25T22:06:43Z", "subject": "", "uid_a": "a_2"}, {"anon": "stud", "content": "<p>Since it seems like you enjoyed security, the design of an operating system takes many security ideas you learn about in 161. An OS kernel is part of your TCB and the various user-level programs may or may not be adversary. How can you ensure that a user-level program doesn&#39;t hog up CPU-time and prevent other user programs from executing (DDOS)? When a user-program requests resources from the OS kernel, what defenses are there to ensure the user-program can&#39;t pass in arguments to cause the kernel to panic? How can user programs be protected from other adversarial user programs? I think one thing overlooked with 162 is the security aspect of it.</p>\n<p></p>\n<p>There are a some security concepts you may apply from 161 to to the design of a monolithic kernel in 162. There are computer architecture elements and distributed systems topics covered in 162 that have less focus on security (no mention of micro-architectural defenses).\u00a0\u00a0</p>\n<p></p>\n<p>There are other reasons and I am sure that has been discussed in previous piazza threads to get you excited about the course.\u00a0</p>", "created": "2020-08-25T22:05:43Z", "subject": "", "uid_a": "a_2"}, {"anon": "stud", "content": "<p>Since it seems like you enjoyed security, an operating system you may think of as basically a security course. An OS kernel is part of your TCB and the various user-level programs may or may not be adversary. How can you ensure that a user-level program doesn&#39;t hog up CPU-time and prevent other user programs from executing (DDOS)? When a user-program requests resources from the OS kernel, what defenses are there to ensure the user-program can&#39;t pass in arguments to cause the kernel to panic? How can user programs be protected from other adversarial user programs? I think one thing overlooked with 162 is the security aspect of it.</p>\n<p></p>\n<p>There are a some security concepts you may apply from 161 to to the design of a monolithic kernel in 162. There are computer architecture elements and distributed systems topics covered in 162 that have less focus on security (no mention of micro-architectural defenses).\u00a0\u00a0</p>\n<p></p>\n<p>There are other reasons and I am sure that has been discussed in previous piazza threads to get you excited about the course.\u00a0</p>", "created": "2020-08-25T22:05:14Z", "subject": "", "uid_a": "a_2"}, {"anon": "stud", "content": "<p></p>", "created": "2020-08-25T19:28:18Z", "subject": "", "uid_a": "a_0"}, {"anon": "stud", "content": "<p>&#43;1</p>", "created": "2020-08-25T12:52:05Z", "subject": "", "uid_a": "a_1"}], "id": "ke9y8bfgtj83ts", "is_tag_endorse": false, "tag_endorse": [{"admin": false, "endorser": {}, "facebook_id": null, "id": "j23iq1bu44024m", "name": "Joshua Samuel", "photo": null, "photo_url": null, "published": true, "role": "student", "us": false}, {"admin": false, "endorser": {}, "facebook_id": null, "id": "j54get93nrd5e2", "name": "Shayna Kothari", "photo": "1584667849_200.jpg", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/j54get93nrd5e2/1584667849_200.jpg", "published": true, "role": "student", "us": false}], "tag_endorse_arr": ["j23iq1bu44024m", "j54get93nrd5e2"], "type": "s_answer"}, {"anon": "stud", "bucket_name": "Today", "bucket_order": 3, "children": [], "config": {}, "created": "2020-08-26T19:08:56Z", "data": {"embed_links": null}, "folders": [], "id": "kebr4szi8i04bd", "no_answer": 0, "no_upvotes": 0, "subject": "<p>Disclaimer: I have not taken CS161, or any of the other 16Xs beside 162 (which I just finished over summer). Rough stuff over summer lmao.\u00a0</p>\n<p></p>\n<p>To answer your question, I would say that 162 really helped me peel back more layers of abstraction. Im sure you&#39;ve already been accustomed to that due to taking 161, so I cant really compare it to how it felt for me in 162. Suddenly you have to get into the nitty gritty details of guaranteeing things work as we write them in our abstractions, and the tools we use to maintain our abstraction layers from the outside are stuff you learn in 162. The OS does a lot of things to maintain the user&#39;s view, but like everything else you&#39;ve learned in CS, there are foundational concepts that help guide our implementations of the OS. My personal favorite topics were scheduling (how the OS allocates CPU power to threads/processes, which can get pretty theoretical as you analyze different scheduling algorithms), and distributed systems (which relies on bits and pieces of knowledge from everything else you&#39;ve learned in the course up till that point). I think the good and bad news for this class is the same; the course very much builds on itself as you go on, which means you should be comfortable with EVERYTHING (well, mostly everything, you get some slack here and there with certain topics), which is a little stressful. But its also fulfilling at the end.\u00a0</p>\n<p></p>\n<p>The OS has some graceful parts (synchronization, for all its headaches, is actual a beautiful way to make sure processes/threads dont mess with one another), and some ugly parts (file systems lol), but its most intriguing when you put it all together and realizes the OS can manage all these things synchronously. The OS is a pretty insane way to make sure your computer runs without the user knowing anything about it. I think the course is super well thought out and the assignments are incredibly engaging. I think you will get a lot more out of it then I did, because its your only CS course over a semester instead of a summer.\u00a0</p>\n<p></p>\n<p>I will recommend you take a peek at the textbook for the course &#34;Operating Systems: Principles and Practice&#34; by Anderson and Dahlin. Its by far not needed in my opinion, but it made understanding course topics really simple. Lastly, I think that once you finish this course, you will have a great understanding of how a computer works in reality, excluding hardware stuff. Your breadth of knowledge of the inner workings of a computer increases significantly with this course, which I think is not only invaluable, but also pretty exciting.\u00a0</p>\n<p></p>\n<p>Best of luck!\u00a0</p>", "tag_good": [], "tag_good_arr": [], "type": "followup", "uid_a": "a_3", "updated": "2020-08-26T19:08:56Z"}], "config": {"seen": {"10579": 6, "11593": 7, "11911": 9, "6562": 1, "7056": 2, "7660": 5, "7921": 4, "9014": 8, "9116": 3, "9148": 0}}, "created": "2020-08-25T07:20:56Z", "data": {"embed_links": []}, "default_anonymity": "no", "drafts": null, "folders": ["peer_directed"], "history": [{"anon": "stud", "content": "<p>I&#39;m a senior taking CS 162 this semester. I had never planned to take CS 162, but somehow (the TL;DR is: I enjoyed CS 161; might want to take CS 261 next semester, if I&#39;m still here; that requires 162), it ended up being the singular CS class I&#39;m taking this semester. Right now, the material doesn&#39;t seem that interesting to me, but I&#39;d love for people to hype up the class for me! What&#39;s fascinating about operating systems? Why did you find this class fun?\u00a0</p>", "created": "2020-08-25T07:20:56Z", "subject": "Get me excited about CS 162", "uid_a": "a_0"}], "i_edits": [], "id": "ke9megyxn4x63i", "is_bookmarked": false, "is_tag_good": false, "my_favorite": false, "no_answer": 0, "no_answer_followup": 0, "nr": 13013, "num_favorites": 1, "q_edits": [], "request_instructor": 0, "request_instructor_me": false, "s_edits": [], "status": "active", "t": 1654542688566, "tag_good": [{"admin": false, "endorser": {}, "facebook_id": null, "id": "jh6ycuki5d747v", "name": "Khang", "photo": null, "photo_url": null, "published": true, "role": "student", "us": false}], "tag_good_arr": ["jh6ycuki5d747v"], "tags": ["peer_directed", "student"], "type": "question", "unique_views": 564}