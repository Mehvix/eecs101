{"bookmarked": 3, "bucket_name": "Today", "bucket_order": 3, "change_log": [{"anon": "no", "data": "jkw0kaq21ac6e2", "type": "create", "uid": "jkdkm71f56947r", "when": "2018-08-16T03:37:09Z"}, {"anon": "stud", "data": "jkw5vcjy8143c8", "to": "jkw0kaq04p56e1", "type": "s_answer", "uid_a": "a_0", "when": "2018-08-16T06:05:42Z"}, {"anon": "stud", "data": "jkw5xbfigab3sw", "type": "s_answer_update", "uid_a": "a_0", "when": "2018-08-16T06:07:14Z"}, {"anon": "no", "to": "jkw0kaq04p56e1", "type": "followup", "uid": "jkdkm71f56947r", "when": "2018-08-16T06:31:16Z"}], "children": [{"bucket_name": "Today", "bucket_order": 3, "children": [], "config": {}, "created": "2018-08-16T06:05:42Z", "data": {"embed_links": []}, "folders": [], "history": [{"anon": "stud", "content": "<p>What happens is that the algorithm picks the closest vertex <tt>v</tt> not yet in the minimum spanning tree (pops it out from the priority queue <tt>fringe.delMin()</tt>), adds it to the MST ( <tt>marked[v] = true</tt>), and then searches through neighbors of <tt>v</tt> to either: 1. add it the priority queue if isn&#39;t already (this happens if a vertex hasn&#39;t been seen yet) 2. update its shortest distance to the MST.</p>\n<p></p>\n<table cellspacing=\"0\" cellpadding=\"6px\" border=\"1\"><tbody><tr><td>But shouldn&#39;t it check all edges that across the cut(a set constructed by the MST under construction and the rest), look at edges that come from all vertices that are currently in the MST? </td></tr></tbody></table>\n<p></p>\n<p>This is implicitly done through the priority queue and the <tt>delMin</tt> operation.</p>", "created": "2018-08-16T06:07:14Z", "subject": "", "uid_a": "a_0"}, {"anon": "stud", "content": "<p>What happens is that the algorithm picks the closest vertex <tt>v</tt> not yet in the minimum spanning tree (pops it out from the priority queue <tt>fringe.delMin()</tt>), adds it to the MST ( <tt>marked[v] = true</tt>), and then searches through neighbors of <tt>v</tt> to either: 1. add it the priority queue if isn&#39;t already (this happens if a vertex hasn&#39;t been seen yet) 2. update its shortest distance to the MST.</p>", "created": "2018-08-16T06:05:42Z", "subject": "", "uid_a": "a_0"}], "id": "jkw5vcjps5a3c7", "is_tag_endorse": false, "tag_endorse": [{"admin": false, "endorser": {"global": 1575533778, "jyuzek7ff1y52o": 1575530784}, "facebook_id": null, "id": "jkdkm71f56947r", "name": "alice lol", "photo": "1579402060_200.jpg", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/jkdkm71f56947r/1579402060_200.jpg", "published": true, "role": "student", "us": false}], "tag_endorse_arr": ["jkdkm71f56947r"], "type": "s_answer"}, {"anon": "no", "bucket_name": "Week 8/12 - 8/18", "bucket_order": 94, "children": [], "config": {}, "created": "2018-08-16T06:31:16Z", "data": {"embed_links": null}, "folders": [], "id": "jkw6s88jm426f4", "no_answer": 0, "no_upvotes": 0, "subject": "<p>Get it. I misunderstood the priority queue here.</p>\n<p></p>\n<p>Btw I&#39;m a new transfer here and this is way more helpful than the annoying GBO..\u00a0</p>\n<p>Thanks!\u00a0</p>", "tag_good": [], "tag_good_arr": [], "type": "followup", "uid": "jkdkm71f56947r", "updated": "2018-08-16T06:31:16Z"}], "config": {}, "created": "2018-08-16T03:37:09Z", "data": {"embed_links": []}, "default_anonymity": "no", "drafts": null, "folders": ["tutoring", "eecs"], "history": [{"anon": "no", "content": "<p>I am trying to pre-study a bit and met this problem, hope somebody could help.</p>\n<p>The\u00a0screenshots are from a slide for CS61B(I don&#39;t quite rem which session tho).\u00a0I got really confused about that scan() method. It seems scan() checks all adjacent edges that come from the most recently popped vertex, v, and greedily chooses the shortest edge that connects v with another vertex that is not already in the MST. But shouldn&#39;t it check all edges that across the cut(a set constructed by the MST under construction and the rest), look at edges that come from all vertices that are currently in the MST?\u00a0</p>\n<p></p>\n<p><img src=\"/redirect/s3?bucket=uploads&amp;prefix=attach%2Fhyq0br1u3kx7dg%2Fjkdkm71f56947r%2Fjkw077ms88c0%2FPrim1.jpeg\" alt=\"\" /></p>\n<p></p>\n<p><img src=\"/redirect/s3?bucket=uploads&amp;prefix=attach%2Fhyq0br1u3kx7dg%2Fjkdkm71f56947r%2Fjkw07nl12kix%2FPrim2.jpeg\" alt=\"\" /></p>\n<p></p>", "created": "2018-08-16T03:37:09Z", "subject": "Question about Prim&#39;s algorithm_61B/170", "uid": "jkdkm71f56947r"}], "i_edits": [], "id": "jkw0kaq04p56e1", "is_bookmarked": false, "is_tag_good": false, "my_favorite": false, "no_answer": 0, "no_answer_followup": 0, "nr": 7469, "num_favorites": 1, "q_edits": [], "request_instructor": 0, "request_instructor_me": false, "s_edits": [], "status": "active", "t": 1654548790587, "tag_good": [], "tag_good_arr": [], "tags": ["eecs", "student", "tutoring"], "type": "question", "unique_views": 374}