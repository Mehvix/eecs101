{"bookmarked": 9, "bucket_name": "Today", "bucket_order": 3, "change_log": [{"anon": "stud", "data": "ixii7oba5pd1qk", "type": "create", "uid_a": "a_0", "when": "2017-01-04T05:29:13Z"}, {"anon": "stud", "data": "ixii7zy2aqx1x1", "type": "update", "uid_a": "a_0", "when": "2017-01-04T05:29:28Z"}, {"anon": "stud", "data": "ixii9kp2tnn26v", "type": "update", "uid_a": "a_0", "when": "2017-01-04T05:30:41Z"}, {"anon": "stud", "data": "ixiiaqvofpa2mr", "type": "update", "uid_a": "a_0", "when": "2017-01-04T05:31:36Z"}, {"anon": "stud", "data": "ixiic1xdf1l1us", "type": "update", "uid_a": "a_0", "when": "2017-01-04T05:32:37Z"}, {"anon": "stud", "data": "ixiix3fsiu96eh", "type": "update", "uid_a": "a_0", "when": "2017-01-04T05:48:59Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "followup", "uid_a": "a_1", "when": "2017-01-04T06:06:10Z"}, {"anon": "stud", "data": "ixijmysa5pe2dq", "type": "update", "uid_a": "a_0", "when": "2017-01-04T06:09:06Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_0", "when": "2017-01-04T06:09:23Z"}, {"anon": "stud", "data": "ixijnus8tbo3pm", "type": "update", "uid_a": "a_0", "when": "2017-01-04T06:09:47Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_1", "when": "2017-01-04T06:18:04Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_0", "when": "2017-01-04T06:43:51Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_2", "when": "2017-01-04T14:13:53Z"}, {"anon": "stud", "data": "ixj8qudv40f6fj", "to": "ixii7ob6ov51qj", "type": "s_answer", "uid_a": "a_3", "when": "2017-01-04T17:51:57Z"}, {"anon": "stud", "data": "ixj8shp4zi4ex", "type": "s_answer_update", "uid_a": "a_3", "when": "2017-01-04T17:53:14Z"}, {"anon": "stud", "data": "ixj8xno53vn53w", "type": "s_answer_update", "uid_a": "a_3", "when": "2017-01-04T17:57:15Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_0", "when": "2017-01-04T18:15:52Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "followup", "uid_a": "a_0", "when": "2017-01-04T18:23:35Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_3", "when": "2017-01-04T18:43:13Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_3", "when": "2017-01-04T18:44:23Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_0", "when": "2017-01-04T19:09:30Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_4", "when": "2017-01-04T19:43:23Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_0", "when": "2017-01-04T20:42:48Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_5", "when": "2017-01-04T21:10:50Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_4", "when": "2017-01-04T21:23:54Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_5", "when": "2017-01-04T21:24:21Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_0", "when": "2017-01-04T22:29:03Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_0", "when": "2017-01-04T22:32:32Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_5", "when": "2017-01-04T23:41:00Z"}, {"anon": "stud", "to": "ixii7ob6ov51qj", "type": "feedback", "uid_a": "a_5", "when": "2017-01-04T23:58:29Z"}], "children": [{"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [{"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T06:09:23Z", "data": {"embed_links": null}, "folders": [], "id": "ixijncajmsx4vs", "subject": "<p>OP Here. What do you mean? Maybe I can help!</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_0", "updated": "2017-01-04T06:09:23Z"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T06:18:04Z", "data": {"embed_links": null}, "folders": [], "id": "ixijyhrht185ct", "subject": "<p>OP I meant that I also feel your attitude in that the problems that I am solving in CS courses is a sheltered/simplified version of the problems that I am going to solve in the real world. I too would love some answers to your questions!</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_1", "updated": "2017-01-04T06:18:04Z"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T06:43:51Z", "data": {"embed_links": null}, "folders": [], "id": "ixikvnnx3ec3iv", "subject": "<p>I wish they had a &#34;Designing Algorithms&#34; course where you learned to create a completely new algorithm completely from scratch. This would tie together all of the CS curriculm.</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_0", "updated": "2017-01-04T06:43:51Z"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T14:13:53Z", "data": {"embed_links": null}, "folders": [], "id": "ixj0yek3u6g6ax", "subject": "<p>take 170 and then 270 if you&#39;re up for it.</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_2", "updated": "2017-01-04T14:13:53Z"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T18:15:52Z", "data": {"embed_links": null}, "folders": [], "id": "ixj9llwsihs66p", "subject": "<p>I have taken 170 and 270. My point is that they&#39;re not enough. Let&#39;s say our startup idea is a 10x better compression algorithm. Or a GIS system accurate to millimeters. Do you have the knowledge to develop these algorithms? 170 and 270 provide a good theoretical foundation, and are absolutely essential, but aren&#39;t enough.\u00a0</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_0", "updated": "2017-01-04T18:15:52Z"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T18:44:23Z", "data": {"embed_links": null}, "folders": [], "id": "ixjam9p15rp88", "subject": "<p>no, because any startup trying to say &#34;I will solve deep rooted problems that the world&#39;s experts haven&#39;t solved&#34; without any experts on the team is a recipe for complete disaster.\u00a0</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_3", "updated": "2017-01-04T18:44:23Z"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T21:10:50Z", "data": {"embed_links": null}, "folders": [], "id": "ixjfum4eekc5xv", "subject": "<p>Yeah usually someone, usually a PhD, comes up with the new encryption during research and then goes to industry to make the startup. No one makes a start-up with the intention of solving a research problem. That is a recipe for failure.</p>\n<p></p>\n<p>Ubers routing probably started with know algos and then we&#39;re refined as they hired more talented people. After all, route generation was already a solved problem before Uber. Google has been doing it , the AI in our video games have been doing it. Same goes for Airbnb matching. There is nothing groundbreaking about what they do from a technical perspective.\u00a0</p>\n<p></p>\n<p>PageRank came out of a research project at Stanford, and built on from existing ideas.\u00a0</p>\n<p></p>\n<p></p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_5", "updated": "2017-01-04T21:10:50Z"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T22:32:32Z", "data": {"embed_links": null}, "folders": [], "id": "ixjiro852km7u", "subject": "<p>So what you&#39;re saying is that every successful tech startup builds on already solved problems? Just wanted to clarify.</p>\n<p></p>\n<p>I feel like Uber and Airbnb have to solve some unique problems. Not every routing problem\u00a0they encounter has been solved by research. In that case, they needed highly skilled engineers (including some from Berkeley I&#39;d assume) who solved these problems. How can I get to their level? Is what I&#39;m asking.</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_0", "updated": "2017-01-04T22:32:32Z"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T23:58:29Z", "data": {"embed_links": null}, "folders": [], "id": "ixjlu7889md6pu", "subject": "<p>Addressed your\u00a0examples and other questions in the other comment thread below.\u00a0</p>\n<p></p>\n<p>I&#39;m not saying that *every* successful tech startup builds on already solved problems, that would be too broad a statement. The vast majority of the ones I&#39;ve heard of\u00a0are using technology that already existed. If their tech is really that novel it often comes from one of the founders&#39; research projects, a-la PageRank. A lot of innovation also comes from applying new but known techniques in new ways, for example startups using CRISPR for gene therapy -- you wouldn&#39;t set out to invent CRISPR along the way of achieving your startup&#39;s goal,\u00a0but once it exists you have a good shot at making a business around it.\u00a0Or 23andMe, I doubt that they invented their sequencing methods from scratch, they must have known that their business would be feasible and the technology was good enough to make the product affordable before they started. And there are a plethora of startups trying to apply machine learning to different purposes and industries.\u00a0</p>\n<p></p>\n<p>I think your question\u00a0is a really good one, and at the heart of it many of the students here are wondering the same thing. I made an attempt at answering it in the thread below.\u00a0Don&#39;t take my posts above as negativity, I just wanted to point out some possible flaws in the assumptions behind the question (1)\u00a0myth of getting rich by creating algorithms, and (2) myth that startups are synonymous with creating new algorithms.\u00a0</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_5", "updated": "2017-01-04T23:58:29Z"}], "config": {}, "created": "2017-01-04T06:06:10Z", "data": {"embed_links": null}, "folders": [], "id": "ixijj744zq12wq", "no_answer": 0, "no_upvotes": 0, "subject": "<p>&#43;100000 to this question. I&#39;m a sophomore and I am beginning to feel OP&#39;s attitude....</p>", "tag_good": [], "tag_good_arr": [], "type": "followup", "uid_a": "a_1", "updated": "2017-01-04T06:06:10Z"}, {"bucket_name": "Today", "bucket_order": 3, "children": [], "config": {}, "created": "2017-01-04T17:51:57Z", "data": {"embed_links": []}, "folders": [], "history": [{"anon": "stud", "content": "<p>This is sort of an ill-formed question because there&#39;s no &#34;magical class&#34; that will magically transform your algorithmic knowledge. Just like anything else deeply, you&#39;ll have to know how to read books, papers, talk to people, etc. to refine and structure your knowledge.\u00a0Furthermore, especially for &#34;algorithms&#34;, there are very different tiers; just saying &#34;algorithms&#34; is an extremely ambiguous term. For example, algorithms can come from</p>\n<p></p>\n<p>A. Almost purely theoretical - (making it very close to pure math in all honesty), whose papers are mainly about mathematical sophistication and beauty, although can be &#34;applied&#34;. These results are the sort of results that are more knowledge-oriented, although it isn&#39;t bad knowing these things because they are the &#34;source&#34; of many practical works. \u00a0</p>\n<p>B. Theoretical, but motivated more by optimization (e.g. especially improvements in certain ML algorithms), e.g. submodular optimization, graphical models, alg-econ, etc.\u00a0</p>\n<p>C. Balanced b/w practical and theoretical - these are the types of algorithms that use earlier theory work, but add in experimental results to justify. (e.g. data comes from industrial settings and the algorithms come from theory) \u00a0\u00a0</p>\n<p>D. More practical, empirical results to boost algorithms (distributed settings, parallel, etc.)</p>\n<p></p>\n<p>For startup purposes, it&#39;s way more towards B -&gt; D that you should be interested in. (and therefore it&#39;s not as super mathematical as you think). Also, the types of examples you give are quite old - these companies did use to be from data mining practices, but now are slowly funding more and more into things in the A-&gt; B sector.\u00a0<br /><br />tl;dr - this question is super ambiguous - &#34;there is no royal road to mathematics&#34; -Euclid<br /><br /></p>\n<p></p>", "created": "2017-01-04T17:57:15Z", "subject": "", "uid_a": "a_3"}, {"anon": "stud", "content": "<p>This is sort of an ill-formed question because there&#39;s no &#34;magical class&#34; that will magically transform your algorithmic knowledge. Just like anything else deeply, you&#39;ll have to know how to read books, papers, talk to people, etc. to refine and structure your knowledge.\u00a0Furthermore, especially for &#34;algorithms&#34;, there are very different tiers; just saying &#34;algorithms&#34; is an extremely ambiguous term. For example, algorithms can come from</p>\n<p></p>\n<p>A. Almost purely theoretical - (making it very close to pure math in all honesty), whose papers are mainly about mathematical sophistication and beauty, although can be &#34;applied&#34;. These results are the sort of results that are more knowledge-oriented, although it isn&#39;t bad knowing these things because they are the &#34;source&#34; of many practical works. \u00a0</p>\n<p>B. Theoretical, but motivated more by optimization (e.g. especially improvements in certain ML algorithms), e.g. submodular optimization, graphical models, alg-econ, etc.\u00a0</p>\n<p>C. Balanced b/w practical and theoretical - these are the types of algorithms that use earlier theory work, but add in experimental results to justify. (e.g. data comes from industrial settings and the algorithms come from theory) \u00a0\u00a0</p>\n<p>D. More practical, empirical results to boost algorithms (distributed settings, parallel, etc.)</p>\n<p></p>\n<p>For startup purposes, it&#39;s way more towards B -&gt; D that you should be interested in. (and therefore it&#39;s not as super mathematical as you think). Also, the types of examples you give are quite old - these companies did use to be from data mining practices, but now are slowly funding more and more into things in the A-&gt; B sector.\u00a0<br /><br />tl;dr - this question is super ambiguous\u00a0<br /><br /></p>", "created": "2017-01-04T17:53:14Z", "subject": "", "uid_a": "a_3"}, {"anon": "stud", "content": "<p>This is sort of an ill-formed question because there&#39;s no &#34;magical class&#34; that will magically transform your algorithmic knowledge. Just like anything else deeply, you&#39;ll have to know how to read books, papers, talk to people, etc. to refine and structure your knowledge.\u00a0Furthermore, especially for &#34;algorithms&#34;, there are very different tiers; just saying &#34;algorithms&#34; is an extremely ambiguous term. For example, algorithms can come from</p>\n<p></p>\n<p>A. Almost purely theoretical - (making it very close to pure math in all honesty), whose papers are mainly about mathematical sophistication and beauty, although can be &#34;applied&#34;. These results are the sort of results that are more knowledge-oriented, although it isn&#39;t bad knowing these things because they are the &#34;source&#34; of many practical works. \u00a0</p>\n<p>B. Theoretical, but motivated more by optimization (e.g. especially improvements in certain ML algorithms), e.g. submodular optimization, graphical models, alg-econ, etc.\u00a0</p>\n<p>C. Balanced b/w practical and theoretical - these are the types of algorithms that use earlier theory work, but add in experimental results to justify. (e.g. data comes from industrial settings and the algorithms come from theory) \u00a0\u00a0</p>\n<p>D. More practical, empirical results to boost algorithms (distributed settings, parallel, etc.)</p>\n<p></p>\n<p>For startup purposes, it&#39;s way more towards B -&gt; D that you should be interested in. (and therefore it&#39;s not as super mathematical as you think). Also, the types of examples you give are quite old - these companies did use to be from data mining practices, but now are slowly funding more and more into things in the A-&gt; B sector.\u00a0<br /><br />tl;dr - this question is super ambiguous</p>", "created": "2017-01-04T17:51:57Z", "subject": "", "uid_a": "a_3"}], "id": "ixj8qudo6u36fi", "is_tag_endorse": false, "tag_endorse": [{"admin": false, "endorser": {}, "facebook_id": null, "id": "hktxrim2drk3da", "name": "Rohan Mathuria", "photo": null, "photo_url": null, "published": true, "role": "student", "us": false}, {"admin": false, "endorser": {"ijkj0mez6r218b": 1, "j3b97758y6d1tj": 1}, "facebook_id": null, "id": "ijly8cfwGjP", "name": "Nader Namini", "photo": "1544211678_35.png", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/ijly8cfwGjP/1544211678_35.png", "published": true, "role": "student", "us": false}, {"admin": false, "endorser": {"global": 1542387698, "j6bczj0pmoo4mk": 1512278032, "jaepthp7wf44nh": 1525327897, "jkieu4nv1t55g8": 1538161283, "jr1f3sutei62un": 1550805110, "jz2c8op4xqq4z3": 1576298894}, "facebook_id": null, "id": "ixwrh8mz7qt1nn", "name": "Brian Hung", "photo": null, "photo_url": null, "published": true, "role": "student", "us": false}], "tag_endorse_arr": ["hktxrim2drk3da", "ijly8cfwGjP", "ixwrh8mz7qt1nn"], "type": "s_answer"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [{"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T18:43:13Z", "data": {"embed_links": null}, "folders": [], "id": "ixjakrxip2s30b", "subject": "<p>#2. Almost never happens; there is almost zero replacement for academic training.\u00a0</p>\n<p>#1. Right, that&#39;s what grad school basically is, although even then, I think you should retain some amount of flexibility, which is important to ever-changing background conditions.\u00a0</p>\n<p></p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_3", "updated": "2017-01-04T18:43:13Z"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T19:09:30Z", "data": {"embed_links": null}, "folders": [], "id": "ixjbikg2sbt394", "subject": "<p>&#34;There is zero replacement for academic training&#34;</p>\n<p>OP Here. Based on what you&#39;re saying, you almost always need\u00a0to go to grad school before developing your own novel algorithms like for a startup. But how do all those college dropouts who found companies do it then?</p>\n<p></p>\n<p>Are they just geniuses? Do they learn as they go? Have they already taught themselves everything? Like in the show Silicon Valley: How does Richard Hendrix know so much about compression?</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_0", "updated": "2017-01-04T19:09:30Z"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T19:43:23Z", "data": {"embed_links": null}, "folders": [], "id": "ixjcq5o63vb6ft", "subject": "<p>it&#39;s hollywood dude</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_4", "updated": "2017-01-04T19:43:23Z"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T20:42:48Z", "data": {"embed_links": null}, "folders": [], "id": "ixjeukd7hij5gl", "subject": "<p>I know but how do they do it in real life?</p>\n<p></p>\n<p>Also, even if it is Hollywood, don&#39;t you want to get to that level? Don&#39;t you want to have a chance of becoming a billionare?</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_0", "updated": "2017-01-04T20:42:48Z"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T21:23:54Z", "data": {"embed_links": null}, "folders": [], "id": "ixjgbejej5g559", "subject": "<p>not really.</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_4", "updated": "2017-01-04T21:23:54Z"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T21:24:21Z", "data": {"embed_links": null}, "folders": [], "id": "ixjgbztrq1w2l3", "subject": "<p>The college dropouts , can you name one who created some novel algorithms? Facebook wasn&#39;t built on new algorithms it was just another clone of Friendster and MySpace with a different spin. Their success wasn&#39;t due to technical wizardry but a combination of luck and business decisions. Bill Gates was probably the smartest example of the genius-college-dropout archetype I can think of, but even his success was more due to business decisions than technical achievements. MS Office and MS DOS were purchased, he didn&#39;t create them himself.\u00a0</p>\n<p></p>\n<p>I get what you are asking I think, it is probably the dream of most CS students to be working on new algorithms, and then become wealthy as a result but I think it&#39;s way less common than you think.\u00a0</p>\n<p></p>\n<p>Most big tech startups are at least as much a business success as they are technical.</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_5", "updated": "2017-01-04T21:24:21Z"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T22:29:03Z", "data": {"embed_links": null}, "folders": [], "id": "ixjin7duqi144", "subject": "<p>OP Here. I agree with you. Business and marketing is just as important as the technical greatness of your product. As a CS student though, I&#39;m going to be working on the technical side of the startup. I&#39;m not focused on the business side.</p>\n<p></p>\n<p>My question is: How can I get good enough that I can build a startup&#39;s novel algorithms from scratch? Someone has to do it. And that someone can get very rich.</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_0", "updated": "2017-01-04T22:29:03Z"}, {"anon": "stud", "bucket_name": "Week 1/1 - 1/7", "bucket_order": 168, "children": [], "config": {}, "created": "2017-01-04T23:41:00Z", "data": {"embed_links": null}, "folders": [], "id": "ixjl7q7y58ns3", "subject": "<p>I&#39;d say just get a really good foundational CS education at Berkeley. Understand data structures really well, and understanding all the concepts from CS61C is also really important. And then build on top of those with Upper Div courses. I would study databases, distributed systems, CS 170, and also get some exposure to machine learning because a lot of companies going forward are going to have some ML component. It&#39;s probably at least as important to get real world experience\u00a0through internships, and also spend time understanding how companies in general build their systems by reading blogs and articles about architecture.</p>\n<p></p>\n<p>The majority of the work isn&#39;t in designing an algorithm, but in architecting a system. Most companies are built around a patchwork of open source technologies. If you are big enough your company might create it&#39;s own tech from scratch.\u00a0The engineering teams from companies often publish articles about how they built their systems, they often give talks at conferences and meetups. A couple of examples are listed below. I would read those as much as possible, and try to get experience implementing systems along those lines. Personal projects if you have time for it (but I honestly don&#39;t get how someone can have time to do side projects with school and then internships in the summer).\u00a0</p>\n<p></p>\n<p>Another side point is the chance of getting rich is pretty low. That&#39;s what most people want in the tech field but only a small number actually achieve that. By the time you know that Airbnb is\u00a0going to be successful it&#39;s too late to get rich by working there. That&#39;s not to say that you can&#39;t make good money being really good at this type of design and architecture.\u00a0</p>\n<p></p>\n<p><strong>Examples</strong></p>\n<p>Instagram is a good example. There is nothing amazing in their technology. They didn&#39;t invent new algorithms\u00a0that will go into a textbook some years later. It was built by a team of around 10 people, and when they got popular they were able to scale because they understood the fundamentals. Anyone can build Instagram that is usable by &lt;=100 people, but it takes skill to build Instagram that works at\u00a0scale, where one celebrity can have 10 million followers.\u00a0<a href=\"https://blogs.vmware.com/vfabric/2013/04/how-instagram-feeds-work-celery-and-rabbitmq.html\">https://blogs.vmware.com/vfabric/2013/04/how-instagram-feeds-work-celery-and-rabbitmq.html</a>. There is nothing there that&#39;s really ground breaking, just smart decisions based on concepts you should understand if you come out of Berkeley with an EECS/CS degree. That and using open source technologies like Redis, RabbitMQ, etc.\u00a0</p>\n<p></p>\n<p>Airbnb&#39;s system described:\u00a0<a href=\"https://www.youtube.com/watch?v=qeLekzZc3XU\">https://www.youtube.com/watch?v=qeLekzZc3XU</a>\u00a0</p>\n<p>It&#39;s a huge system of various open source tools. Their search index is based on open source Lucene, and they have some custom bits here and there. They use some machine learning and possibly other custom methods to rank the search results. But most of the stuff there is hard work and decisions based on understanding fundamentals.\u00a0</p>\n<p></p>\n<p>If this is the kind of thing you are interested in you might also be interested in studying distributed systems.\u00a0</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_5", "updated": "2017-01-04T23:41:00Z"}], "config": {}, "created": "2017-01-04T18:23:35Z", "data": {"embed_links": null}, "folders": [], "id": "ixj9viv72zo2wx", "no_answer": 0, "no_upvotes": 0, "subject": "<p>Student Answerer:</p>\n<p>OP Here. I really liked how you broke down papers into those categories; I&#39;ve never seen that before.</p>\n<p></p>\n<p>How do you suggest I start learning areas B - D? I had a few ideas. Please let me know your suggestions!</p>\n<p></p>\n<p>1. Choose one area and go very deep. It could be a CS topic like routing or matching or not, like genetic and GIS algorithms. Read every paper you can on this topic. Go to grad school and write your thesis on this topic.\u00a0</p>\n<p></p>\n<p>2. Choose one area. Go work in a company and team where this area is being pursued, for a few years. You&#39;ll understand the field very well. Then, start reading research papers to polish off your knowledge.</p>", "tag_good": [], "tag_good_arr": [], "type": "followup", "uid_a": "a_0", "updated": "2017-01-04T18:23:35Z"}], "config": {}, "created": "2017-01-04T05:29:13Z", "data": {"embed_links": []}, "default_anonymity": "no", "drafts": {}, "folders": ["eecs", "cs"], "history": [{"anon": "stud", "content": "<p>After college, I want to work at startups. This means creating novel algorithms. Think about it, every major tech company has a set of core algorithms. For Google it&#39;s PageRank, for Facebook it&#39;s News Feed, for Uber it&#39;s routing, for Airbnb, it&#39;s matching.</p>\n<p></p>\n<p><strong> My question is, how can I get to the level where I can design these algorithms myself?</strong> CS 170 and 270 teach you to solve problems that are semi-realistic, but too simple for novel real world problems. <strong>What other courses / topics do I need to learn? </strong></p>\n<p></p>\n<p>My guess is that you have to master math (discrete, probability, statistics, linear algebra, abstract algebra in particular). Then, you can notice certain mathematical properties that achieve what you want. Thus, you can model PageRank as a Markov Chain problem, encryption as operations over a Galois field, Airbnb matching as a Stable Marriage variation, etc.</p>\n<p></p>\n<p>Thank you!</p>\n<p></p>\n<p>&#64;Steven Bi, &#64;Anant Sahai, &#64;Yujie, &#64;Rohit Braganza, &#64;Alex Tseng</p>", "created": "2017-01-04T06:09:47Z", "subject": "Developing complex algorithms - classes to take?", "uid_a": "a_0"}, {"anon": "stud", "content": "<p>After college, I want to work at startups. This means creating novel algorithms. Think about it, every major tech company has a set of core algorithms. For Google it&#39;s PageRank, for Facebook it&#39;s News Feed, for Uber it&#39;s routing, for Airbnb, it&#39;s matching.</p>\n<p></p>\n<p><strong> My question is, how can I get to the level where I can design these algorithms myself?</strong> CS 170 and 270 teach you to solve problems that are semi-realistic, but too simple for completely novel real world problems. <strong>What other courses / topics do I need to learn? </strong></p>\n<p></p>\n<p>My guess is that you have to master math (discrete, probability, statistics, linear algebra, abstract algebra in particular). Then, you can notice certain mathematical properties that achieve what you want. Thus, you can model PageRank as a Markov Chain problem, encryption as operations over a Galois field, Airbnb matching as a Stable Marriage variation, etc.</p>\n<p></p>\n<p>Thank you!</p>\n<p></p>\n<p>&#64;Steven Bi, &#64;Anant Sahai, &#64;Yujie, &#64;Rohit Braganza, &#64;Alex Tseng</p>", "created": "2017-01-04T06:09:06Z", "subject": "Developing complex algorithms - classes to take?", "uid_a": "a_0"}, {"anon": "stud", "content": "<p>After college, I want to work at startups. This means creating novel algorithms. Think about it, every major tech company has a set of core algorithms. For Google it&#39;s PageRank, for Facebook it&#39;s News Feed, for Uber it&#39;s routing, for Airbnb, it&#39;s matching.</p>\n<p></p>\n<p><strong> My question is, how can I get to the level where I can design these algorithms myself?</strong> CS 170 and 270 teach you to solve problems that are semi-realistic, but too simple for completely novel real world problems. <strong>What other courses / topics do I need to learn? </strong></p>\n<p></p>\n<p>My guess is that you have to master math (discrete, probability, statistics, linear algebra, abstract algebra in particular). Then, you can notice certain mathematical properties that achieve what you want. Thus, you can model PageRank as a Markov Chain problem, encryption as operations over a Galois field, Airbnb matching as a Stable Marriage variation, etc.</p>\n<p></p>\n<p>Thank you!</p>\n<p>&#64;Steven Bi, &#64;Anant Sahai, &#64;Yujie, &#64;Rohit Braganza, &#64;Alex Tseng</p>", "created": "2017-01-04T05:48:59Z", "subject": "Developing complex algorithms - classes to take?", "uid_a": "a_0"}, {"anon": "stud", "content": "<p>After college, I want to work at startups. This means creating novel algorithms. Think about it, every major tech company has a set of core algorithms. For Google it&#39;s PageRank, for Facebook it&#39;s News Feed, for Uber it&#39;s routing, for Airbnb, it&#39;s matching.</p>\n<p></p>\n<p><strong> My question is, how can I get to the level where I can design these algorithms myself?</strong> CS 170 and 270 teach you to solve problems that are semi-realistic, but too simple for completely novel real world problems. <strong>What other courses / topics do I need to learn? </strong></p>\n<p></p>\n<p>My guess is that you have to master math (discrete, probability, statistics, linear algebra, abstract algebra in particular). Then, you can notice certain mathematical properties that achieve what you want. Thus, you can model PageRank as a Markov Chain problem, encryption as operations over a Galois field, Airbnb matching as a Stable Marriage variation, etc.</p>\n<p></p>\n<p>Thank you! &#64;Steven Bi, &#64;Anant Sahai, &#64;Yujie, &#64;Rohit Braganza, &#64;Alex Tseng</p>", "created": "2017-01-04T05:32:37Z", "subject": "Developing complex algorithms - classes to take?", "uid_a": "a_0"}, {"anon": "stud", "content": "<p>After college, I want to work at startups. This means creating novel algorithms. Think about it, every major tech company has a set of core algorithms. For Google it&#39;s PageRank, for Facebook it&#39;s News Feed, for Uber it&#39;s routing, for Airbnb, it&#39;s matching.</p>\n<p></p>\n<p><strong> My question is, how can I get to the level where I can design these algorithms myself?</strong> CS 170 and 270 teach you to solve problems that are semi-realistic, but too simple for completely novel real world problems. <strong>What other courses / topics do I need to learn? </strong></p>\n<p></p>\n<p>My guess is that you have to master math (discrete, probability, statistics, linear algebra, abstract algebra in particular). Then, you can notice certain mathematical properties that achieve what you want. Thus, you can model PageRank as a Markov Chain problem, encryption as operations over a Galois field, Airbnb matching as a Stable Marriage variation, etc.</p>\n<p></p>\n<p>Thank you! &#64;Steven Bi, &#64;Anant Sahai, &#64;Yujie, &#64;Rohit Braganza</p>", "created": "2017-01-04T05:31:36Z", "subject": "Developing complex algorithms - classes to take?", "uid_a": "a_0"}, {"anon": "stud", "content": "<p>After college, I want to work at startups. This means creating novel algorithms. Think about it, every major tech company has a set of core algorithms. For Google it&#39;s PageRank, for Facebook it&#39;s News Feed, for Uber it&#39;s routing, for Airbnb, it&#39;s matching.</p>\n<p></p>\n<p><strong> My question is, how can I get to the level where I can design these algorithms myself?</strong> CS 170 and 270 teach you to solve problems that are semi-realistic, but too simple for completely novel real world problems. <strong>What other courses / topics do I need to learn? </strong></p>\n<p></p>\n<p>My guess is that you have to master math (discrete, probability, statistics, linear algebra, abstract algebra in particular). Then, you can notice certain mathematical properties that achieve what you want. Thus, you can model PageRank as a Markov Chain problem, encryption as operations over a Galois field, Airbnb matching as a Stable Marriage variation, etc.</p>\n<p></p>\n<p>Thank you! &#64;Steven Bi, &#64;Anant Sahai, &#64;Yujie</p>", "created": "2017-01-04T05:30:41Z", "subject": "Developing complex algorithms - classes to take?", "uid_a": "a_0"}, {"anon": "stud", "content": "<p>After college, I want to work at startups. This means creating novel algorithms. Think about it, every major tech company has a set of core algorithms. For Google it&#39;s PageRank, for Facebook it&#39;s News Feed, for Uber it&#39;s routing, for Airbnb, it&#39;s matching.</p>\n<p></p>\n<p><strong> My question is, how can I get to the level where I can design these algorithms myself?</strong> CS 170 and 270 teach you to solve problems that are semi-realistic but too simple for the real world. <strong>What other courses / topics do I need to learn? </strong></p>\n<p></p>\n<p>My guess is that you have to master math (discrete, probability, statistics, linear algebra, abstract algebra in particular). Then, you can notice certain mathematical properties that achieve what you want. Thus, you can model PageRank as a Markov Chain problem, encryption as operations over a Galois field, Airbnb matching as a Stable Marriage variation, etc.</p>\n<p></p>\n<p>Thank you! &#64;Steven Bi, &#64;Anant Sahai, &#64;Yujie</p>", "created": "2017-01-04T05:29:28Z", "subject": "Developing complex algorithms - classes to take?", "uid_a": "a_0"}, {"anon": "stud", "content": "<p>Hi everyone,</p>\n<p></p>\n<p>After college, I want to work at startups. This means creating novel algorithms. Think about it, every major tech company has a set of core algorithms. For Google it&#39;s PageRank, for Facebook it&#39;s News Feed, for Uber it&#39;s routing, for Airbnb, it&#39;s matching.</p>\n<p></p>\n<p><strong> My question is, how can I get to the level where I can design these algorithms myself?</strong> CS 170 and 270 teach you to solve problems that are semi-realistic but too simple for the real world. <strong>What other courses / topics do I need to learn? </strong></p>\n<p></p>\n<p>My guess is that you have to master math (discrete, probability, statistics, linear algebra, abstract algebra in particular). Then, you can notice certain mathematical properties that achieve what you want. Thus, you can model PageRank as a Markov Chain problem, encryption as operations over a Galois field, Airbnb matching as a Stable Marriage variation, etc.</p>\n<p></p>\n<p>Thank you! &#64;Steven Bi, &#64;Anant Sahai, &#64;Yujie</p>", "created": "2017-01-04T05:29:13Z", "subject": "Developing complex algorithms - classes to take?", "uid_a": "a_0"}], "i_edits": [], "id": "ixii7ob6ov51qj", "is_bookmarked": false, "is_tag_good": false, "my_favorite": false, "no_answer": 0, "no_answer_followup": 0, "nr": 2995, "num_favorites": 7, "q_edits": [], "request_instructor": 0, "request_instructor_me": false, "s_edits": [], "status": "active", "t": 1654553609808, "tag_good": [{"admin": false, "endorser": {}, "facebook_id": null, "id": "i93p5fl0mpo6qw", "name": "Aditya Mishra", "photo": null, "photo_url": null, "published": true, "role": "student", "us": false}, {"admin": false, "endorser": {"ids66zeithd2ov": 1, "ijltj19y6lv59e": 1}, "facebook_id": null, "id": "hlx51hr3snv1zn", "name": "Yiqun Chen", "photo": "1454110371_35.png", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/hlx51hr3snv1zn/1454110371_35.png", "published": true, "role": "student", "us": false}], "tag_good_arr": ["i93p5fl0mpo6qw", "hlx51hr3snv1zn"], "tags": ["cs", "eecs", "student"], "type": "question", "unique_views": 582}