{"bookmarked": 12, "bucket_name": "Today", "bucket_order": 3, "change_log": [{"anon": "stud", "data": "k58x2dthov32je", "type": "create", "uid_a": "a_0", "when": "2020-01-11T01:34:21Z"}, {"anon": "stud", "to": "k58x2dte7vl2jd", "type": "followup", "uid_a": "a_1", "when": "2020-01-11T02:04:22Z"}, {"anon": "stud", "data": "k59p2ypg1bm3s1", "to": "k58x2dte7vl2jd", "type": "s_answer", "uid_a": "a_2", "when": "2020-01-11T14:38:37Z"}, {"anon": "no", "to": "k58x2dte7vl2jd", "type": "followup", "uid": "is6p7vl35kd6gl", "when": "2020-01-12T15:26:03Z"}, {"anon": "no", "to": "k58x2dte7vl2jd", "type": "feedback", "uid": "is6p9s9d3q210n", "when": "2020-01-12T16:03:48Z"}, {"anon": "stud", "to": "k58x2dte7vl2jd", "type": "feedback", "uid_a": "a_0", "when": "2020-01-12T16:53:47Z"}, {"anon": "no", "to": "k58x2dte7vl2jd", "type": "feedback", "uid": "is6p6lzfa695i6", "when": "2020-01-12T17:48:41Z"}, {"anon": "no", "to": "k58x2dte7vl2jd", "type": "feedback", "uid": "is6p7vl35kd6gl", "when": "2020-01-12T18:09:45Z"}, {"anon": "no", "to": "k58x2dte7vl2jd", "type": "feedback", "uid": "hktxrmvcxhi3mo", "when": "2020-01-13T07:04:01Z"}], "children": [{"anon": "stud", "bucket_name": "Week 1/5 - 1/11", "bucket_order": 126, "children": [], "config": {}, "created": "2020-01-11T02:04:22Z", "data": {"embed_links": null}, "folders": [], "id": "k58y4z7ny7u3fh", "no_answer": 0, "no_upvotes": 0, "subject": "<p>Sorry I don&#39;t have any advice (haven&#39;t taken 162) but from a fellow bear, welcome back! :)</p>", "tag_good": [], "tag_good_arr": [], "type": "followup", "uid_a": "a_1", "updated": "2020-01-11T02:04:22Z"}, {"bucket_name": "Today", "bucket_order": 3, "children": [], "config": {}, "created": "2020-01-11T14:38:37Z", "data": {"embed_links": []}, "folders": [], "history": [{"anon": "stud", "content": "Start now.<div><br /></div><div>All the lectures from previous semesters can be accessed via course capture and you should start watching them and understanding the material now. Exam wise there is a decent number of points writing code, but most are applying concepts and material learned in lecture.\u00a0</div><div><br /></div><div>Projects and homeworks basically require you to be very familiar with writing in C. I suggest you try online sites to re-learn C syntax, fundamentals, etc ASAP.</div>", "created": "2020-01-11T14:38:37Z", "subject": "", "uid_a": "a_2"}], "history_size": 1, "id": "k59p2yp7djm3s0", "is_tag_endorse": false, "tag_endorse": [{"admin": false, "endorser": {}, "facebook_id": null, "id": "is6p7pkdpaa6cq", "name": "Elijah Bartolome", "photo": null, "photo_url": null, "published": true, "role": "student", "us": false}], "tag_endorse_arr": ["is6p7pkdpaa6cq"], "type": "s_answer"}, {"anon": "no", "bucket_name": "Week 1/12 - 1/18", "bucket_order": 125, "children": [{"anon": "no", "bucket_name": "Week 1/12 - 1/18", "bucket_order": 125, "children": [], "config": {}, "created": "2020-01-12T16:03:48Z", "data": {"embed_links": null}, "folders": [], "id": "k5b7kcztofr1y4", "subject": "<p>^source: Alex is the head TA for\u00a0the upcoming semester<br />adding on from another TA:</p>\n<p></p>\n<p>&#43;1 to that.\u00a0Many students last semester struggled heavily\u00a0with writing C code, so focus on that. You mighttt also benefit from taking a look at Section 0 and HW 0 from last semester, which introduces some of the tools we use in the course (though we don&#39;t really use all of the ones specified in Section 0, which should hopefully be updated for the new semester... &#64;Alex (^:) but I&#39;m not too sure how useful that really will be. Linked here:\u00a0<a href=\"https://cs162.eecs.berkeley.edu/static/hw/hw0.pdf\">https://cs162.eecs.berkeley.edu/static/hw/hw0.pdf</a>\u00a0and\u00a0<a href=\"https://cs162.eecs.berkeley.edu/static/sections/section0.pdf\">https://cs162.eecs.berkeley.edu/static/sections/section0.pdf</a></p>\n<p></p>\n<p>As said before, weakness with C code is the biggest factor. However, if you&#39;d really like to preview the course content still, I would personally recommend reading through our textbook (somewhere on the website)&#39;s\u00a0Volume 1: Kernels and Processes. The\u00a0entire course builds off of these core concepts, and it&#39;s important to understand them well. I really\u00a0like\u00a0the\u00a0textbook; it&#39;s a pretty easy read, with an almost conversational tone, and the examples are simple but effective.</p>\n<p></p>\n<p>You could take a look at the Pintos base code as well (available at\u00a0<a href=\"https://github.com/Berkeley-CS162/group0/tree/master/pintos/src\">https://github.com/Berkeley-CS162/group0/tree/master/pintos/src</a>); the biggest takeaway I had from taking the course as a student was that I should read and understand more code before writing any. The biggest takeaway I had as a TA was that students often\u00a0didn&#39;t understand\u00a0enough existing code - or worse, they\u00a0hadn&#39;t read it to begin with.\u00a0</p>\n<p></p>\n<p>In sum, to be successful (imo): you really should review 61C thoroughly. You also need to be quite good at time management during the upcoming semester if\u00a0you have a\u00a0heavy schedule.</p>\n<p></p>\n<p>A last note:\u00a0you should get to know your TA and communicate often with\u00a0him/her if\u00a0you do feel like you&#39;re struggling; you&#39;ll have a good amount of facetime with us anyway because of the projects, and anyway we&#39;re here to help (:</p>\n<p></p>\n<p>ps. welcome back!\u00a0\u2728</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid": "is6p9s9d3q210n", "updated": "2020-01-12T16:03:48Z"}, {"anon": "stud", "bucket_name": "Week 1/12 - 1/18", "bucket_order": 125, "children": [], "config": {}, "created": "2020-01-12T16:53:47Z", "data": {"embed_links": null}, "folders": [], "id": "k5b9cn063sd6k", "subject": "<p>OP here, thanks for responding!</p>\n<p></p>\n<p>I&#39;ve been using tutorialpoint.com and trying to implement wc from Fall 2019&#39;s HW0 warmup to review C and gdb debugging.</p>\n<p></p>\n<p>What resources could I use to review &#34;writing assembly (risc-v), caching, and maybe a bit of virtual memory&#34;?</p>\n<p></p>\n<p>I&#39;m only taking two courses this semester (CS162 and a 3 unit non-technical course) so hopefully this light schedule won&#39;t get me too overwhelmed :)\u00a0</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid_a": "a_0", "updated": "2020-01-12T16:53:47Z"}, {"anon": "no", "bucket_name": "Week 1/12 - 1/18", "bucket_order": 125, "children": [], "config": {}, "created": "2020-01-12T17:48:41Z", "data": {"embed_links": null}, "folders": [], "id": "k5bbb8tjlmy5vi", "subject": "<p>Reviewing the 61C material for all three is more than good enough. For assembly, we don&#39;t use risc-v but the point is to understand the registers, how to use assembly to\u00a0modify memory, calling conventions, etc. Knowing caching and VM at the level of 61C is more than enough.</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid": "is6p6lzfa695i6", "updated": "2020-01-12T17:48:41Z"}, {"anon": "no", "bucket_name": "Week 1/12 - 1/18", "bucket_order": 125, "children": [], "config": {}, "created": "2020-01-12T18:09:45Z", "data": {"embed_links": null}, "folders": [], "id": "k5bc2btbyeo3v8", "subject": "^source: Will was head TA for 162 in the fall \n\nRISC-V: CS61c Lab 4/5 seems fair (https://cs61c.org/labs/lab05/) \nOne other thing that I think can be useful is to try to understand what some asm that a compiler spits out looks like. I&#39;m not aware of any good resources for doing this with C and risc-v though (you could cross compile for risc-v yourself). 161 has a treatment of this in x86 for binary exploitation. \n\nCaching: 61c has tons of hardware caching resources you could look at. Pretty much anything/everything from week 9-10. CS 186 also has a section on software caches under buffer management. \n\nVirtual memory: Again, 61c isn&#39;t a bad resource. Personally I&#39;d recommend the lecture slides. I think the discussion worksheet is a bit more confusing and doesn&#39;t really distinguish the different layers of caching involved as well.\n\nEdit: This looks like an awesome resource for compiling risc-v. If you feel like you can write this code in both assembly and C and understand it, I think you&#39;re in a great position coming into 162. https://godbolt.org/z/JNUr_o", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid": "is6p7vl35kd6gl", "updated": "2020-01-12T18:09:45Z"}, {"anon": "no", "bucket_name": "Week 1/12 - 1/18", "bucket_order": 125, "children": [], "config": {}, "created": "2020-01-13T07:04:01Z", "data": {"embed_links": null}, "folders": [], "id": "k5c3q16or0hfd", "subject": "<p>I would recommend going over Section 1 from the Fall 2019 offering for practice understanding the relationship between C and assembly. The middle part about multi-file C programs is probably the most useful if you&#39;re studying before the class. You can find the past course materials here: <a href=\"https://inst.eecs.berkeley.edu/~cs162/fa19\">https://inst.eecs.berkeley.edu/~cs162/fa19</a>.</p>\n<p></p>\n<p>I think that, for CS 162, it&#39;s far more important to be comfortable reading assembly and understanding calling conventions than it is to be able to write assembly. It&#39;s important to understand assembly so you know how interfaces work at a low level (e.g., calling conventions, system calls) and to read some of the Pintos source but you won&#39;t ever have to write a line of assembly on homeworks or projects (unless they change the course a lot next semester).</p>\n<p></p>\n<p>For caching, I would recommend looking at the appendix in the Hennessy &amp; Patterson book (specifically the sections here: <a href=\"https://inst.eecs.berkeley.edu/~cs162/fa19/info/\">https://inst.eecs.berkeley.edu/~cs162/fa19/info/</a>). The 61C material is great too, but B.1-B.4 of H&amp;P is succinct so I think it makes a better resource for reviewing (whereas the 61C material is probably better for learning it for the first time).</p>", "tag_good": [], "tag_good_arr": [], "type": "feedback", "uid": "hktxrmvcxhi3mo", "updated": "2020-01-13T07:04:01Z"}], "config": {}, "created": "2020-01-12T15:26:03Z", "data": {"embed_links": null}, "folders": [], "id": "k5b67sqgbru65x", "no_answer": 0, "no_upvotes": 0, "subject": "I\u2019m not sure why everyone recommends trying to self study the class to \u201cprepare\u201d. If you struggled with and/or forgot quite a bit of 61c I would really really recommend spending your time reviewing 61c. I particular, my recommendation is to focus on writing C code, writing assembly (risc-v), caching, and maybe a bit of virtual memory if you have time.<div><br /></div><div>Also, welcome back to Cal!!!</div>", "tag_good": [], "tag_good_arr": [], "type": "followup", "uid": "is6p7vl35kd6gl", "updated": "2020-01-12T15:26:03Z"}], "config": {"seen": {"4586": 0, "6947": 6, "8127": 8, "8455": 3, "8736": 9, "8896": 4, "9199": 7, "9583": 1, "9623": 5, "9822": 2}}, "created": "2020-01-11T01:34:21Z", "data": {"embed_links": []}, "default_anonymity": "no", "drafts": null, "folders": ["lscs"], "history": [{"anon": "stud", "content": "<p>Hello,</p>\n<p></p>\n<p>I am a declared LSCS major returning to UC Berkeley this upcoming Spring 2020 semester after taking a medical withdrawal last year in January due to severe depression. I am planning to take CS162, but I am worried that I am not well-prepared to take the class, especially since I got a C in CS61C during my last semester at Cal in Fall 2018 and have barely coded since the start of my medical withdrawal a year ago.\u00a0</p>\n<p></p>\n<p>I am wondering what I could do to reasonably prepare for the class and review the prerequisites listed on the course website before classes start without exhausting myself mentally. The course website from Fall 2019 recommended the textbook &#34;<i>Computer Architecture: A Quantitative Approach</i>&#34; to review the prerequisites listed on the website, but I felt a lot of the information went over my head when I read the 4th edition online.\u00a0</p>\n<p></p>\n<p>Any advice will be well appreciated!</p>\n<p></p>\n<p>Thank you</p>\n<p></p>\n<p></p>", "created": "2020-01-11T01:34:21Z", "subject": "How to prepare for CS162 if I barely coded in a year?", "uid_a": "a_0"}], "history_size": 1, "i_edits": [], "id": "k58x2dte7vl2jd", "is_bookmarked": false, "is_tag_good": false, "my_favorite": false, "no_answer": 0, "no_answer_followup": 0, "nr": 11158, "num_favorites": 6, "q_edits": [], "request_instructor": 0, "request_instructor_me": false, "s_edits": [], "status": "active", "t": 1654544806518, "tag_good": [{"admin": false, "endorser": {}, "facebook_id": null, "id": "is6p9mf96y2ty", "name": "Henry Muller", "photo": "1484632252_35.png", "photo_url": "https://cdn-uploads.piazza.com/photos/is6p9mf96y2ty/1484632252_35.png", "published": true, "role": "student", "us": false}, {"admin": false, "endorser": {}, "facebook_id": null, "id": "jktvex6279x3zb", "name": "Maxwell Chen", "photo": "1579165146_200.jpg", "photo_url": "https://cdn-uploads.piazza.com/photos/jktvex6279x3zb/1579165146_200.jpg", "published": true, "role": "student", "us": false}, {"admin": false, "endorser": {}, "facebook_id": null, "id": "k1zl10wlpt9gd", "name": "Jessica Dong", "photo": null, "photo_url": null, "published": true, "role": "student", "us": false}], "tag_good_arr": ["is6p9mf96y2ty", "jktvex6279x3zb", "k1zl10wlpt9gd"], "tags": ["lscs", "student"], "type": "question", "unique_views": 438}